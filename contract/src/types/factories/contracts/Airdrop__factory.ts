/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Airdrop, AirdropInterface } from "../../contracts/Airdrop";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "mingAddr_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mingAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "roothash_",
        type: "bytes32",
      },
    ],
    name: "setRootHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040527f9243a73f24467ae4c63c33f3ded1f04fa9e455d61ad9ab5316e72a400c7ee7f160015534801561003457600080fd5b506040516107ca3803806107ca833981016040819052610053916100bd565b61005c3361006d565b6001600160a01b03166080526100ed565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100cf57600080fd5b81516001600160a01b03811681146100e657600080fd5b9392505050565b6080516106bc61010e6000396000818160cb01526102d701526106bc6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610105578063b391c50814610116578063db4bec4414610129578063f2fde38b1461015c57600080fd5b80632d7eae661461008d5780632eb4a7ab146100a2578063715018a6146100be578063890a4e09146100c6575b600080fd5b6100a061009b366004610599565b61016f565b005b6100ab60015481565b6040519081526020015b60405180910390f35b6100a061017c565b6100ed7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b5565b6000546001600160a01b03166100ed565b6100a06101243660046105b2565b610190565b61014c610137366004610627565b60026020526000908152604090205460ff1681565b60405190151581526020016100b5565b6100a061016a366004610627565b6103b2565b610177610442565b600155565b610184610442565b61018e600061049c565b565b3360009081526002602052604090205460ff16156101f55760405162461bcd60e51b815260206004820152601c60248201527f616464726573732068617320616c726561647920636c61696d65642e0000000060448201526064015b60405180910390fd5b6040516bffffffffffffffffffffffff193360601b16602082015260009060340160405160208183030381529060405280519060200120905061026f838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506001549150849050610504565b6102bb5760405162461bcd60e51b815260206004820152600e60248201527f496e7661696c642070726f6f662e00000000000000000000000000000000000060448201526064016101ec565b336000908152600260205260409020805460ff191660011790557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd6103166000546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152336024820152670de0b6b3a764000060448201526064016020604051808303816000875af1158015610388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ac9190610650565b50505050565b6103ba610442565b6001600160a01b0381166104365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101ec565b61043f8161049c565b50565b6000546001600160a01b0316331461018e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ec565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082610511858461051a565b14949350505050565b600081815b845181101561055f5761054b8286838151811061053e5761053e610672565b6020026020010151610567565b91508061055781610688565b91505061051f565b509392505050565b6000818310610583576000828152602084905260409020610592565b60008381526020839052604090205b9392505050565b6000602082840312156105ab57600080fd5b5035919050565b600080602083850312156105c557600080fd5b823567ffffffffffffffff808211156105dd57600080fd5b818501915085601f8301126105f157600080fd5b81358181111561060057600080fd5b8660208260051b850101111561061557600080fd5b60209290920196919550909350505050565b60006020828403121561063957600080fd5b81356001600160a01b038116811461059257600080fd5b60006020828403121561066257600080fd5b8151801515811461059257600080fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016106a857634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080d000a";

type AirdropConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AirdropConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Airdrop__factory extends ContractFactory {
  constructor(...args: AirdropConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    mingAddr_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Airdrop> {
    return super.deploy(mingAddr_, overrides || {}) as Promise<Airdrop>;
  }
  override getDeployTransaction(
    mingAddr_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(mingAddr_, overrides || {});
  }
  override attach(address: string): Airdrop {
    return super.attach(address) as Airdrop;
  }
  override connect(signer: Signer): Airdrop__factory {
    return super.connect(signer) as Airdrop__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AirdropInterface {
    return new utils.Interface(_abi) as AirdropInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Airdrop {
    return new Contract(address, _abi, signerOrProvider) as Airdrop;
  }
}
